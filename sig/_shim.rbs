module RuboCop
  class ConfigLoader
    def self.debug?: () -> boolish
    def self.merge_with_default: (Config, String) -> Config
  end

  class Config
    def initialize: (Hash[untyped, untyped], String) -> void
  end

  module Cop
    class Base
      extend AST::NodePattern::Macros

      def add_offense: (untyped node, ?message: String) -> void
      def cop_config: () -> Hash[String, untyped]
      def processed_source: () -> AST::ProcessedSource
    end

    module RangeHelp
      def source_range: (Parser::Source::Buffer source_buffer, Integer line_number, Integer column, ?Integer length) -> Parser::Source::Range 
    end
  end

  class ProcessedSource = AST::ProcessedSource
end

module RuboCop
  module AST
    class ProcessedSource
      def raw_source: () -> String
      def buffer: () -> Parser::Source::Buffer
    end

    module NodePattern
      module Macros
        def def_node_matcher: (Symbol, String) -> void
      end
    end
  end
end

module Parser
  module Source
    class Range
    end

    class Buffer
    end
  end
end
